#!/usr/bin/env python

import os
import subprocess
import sys
import time

from stat import ST_MTIME

SCRIPT_DIR = os.path.dirname(__file__)
if SCRIPT_DIR in ('', '.'):
    SCRIPT_DIR = os.getcwd()

# the file that holds user-specific configuration for authentication.  if this
# file doesn't exist the user is not using 2-factor auth and should be allowed
# to login anyway.
AUTHENTICATOR_FILE = os.path.expanduser('~/.google_authenticator')

VERIFY_PROGRAM = 'google-authenticator-verify'
VERIFY = '/usr/local/bin/{0}'.format(VERIFY_PROGRAM)

# number of seconds that a verification should be valid for
# this is set to be valid for 9 hours
VERIFICATION_VALIDITY_WINDOW = 3600*9

# use the file's mod time to determine the last time verification was done.
VERIFIED_TIME_DIR = os.path.expanduser('~/.google-ssh-key-last-verified')

if not os.path.exists(VERIFIED_TIME_DIR):
    os.makedirs(VERIFIED_TIME_DIR)

# raised when run outside of an SSH session
class NotSSH(Exception): pass

def get_verified_time_file():
    try:
        remote_ip = os.environ['SSH_CONNECTION'].split(' ', 1)[0]
    except KeyError:
        raise NotSSH()

    return os.path.join(VERIFIED_TIME_DIR, remote_ip)

def is_ip_verified():
    try:
        verified_time_file = get_verified_time_file()
    except NotSSH:
        return False

    if not os.path.exists(verified_time_file):
        return False

    now = time.time()
    mtime = os.stat(verified_time_file)[ST_MTIME]

    return now < (mtime + VERIFICATION_VALIDITY_WINDOW)

def is_secret_correct(secret):
    verify = VERIFY if os.path.exists(VERIFY) else os.path.join(SCRIPT_DIR, VERIFY_PROGRAM)

    try:
        return subprocess.Popen([verify, secret]).wait() == 0
    except OSError, msg:
        raise OSError('Unable to run {0}'.format(verify))

def launch_command():
    command = os.environ.get('SSH_ORIGINAL_COMMAND')
    if not command:
        command = os.environ['SHELL']
        args = (command, '-l')
    else:
        args = command.split()
        command = args[0]

    # replace the existing process with the original command.
    os.execvpe(command, args, os.environ)

def save_verified_time():
    try:
        verified_time_file = get_verified_time_file()
    except NotSSH:
        sys.stderr.write('Not running under SSH, cannot save verified time\n')
        return

    with open(verified_time_file, 'a'):
        now = int(time.time())
        os.utime(verified_time_file, (now, now))

def main():
    if is_ip_verified():
        launch_command()

    if not os.path.exists(AUTHENTICATOR_FILE):
        launch_command()

    sys.stdout.write('secret: ')
    sys.stdout.flush()

    secret = sys.stdin.readline().strip()

    if is_secret_correct(secret):
        save_verified_time()
        launch_command()

    return 1

if __name__ == '__main__':
    try:
        sys.exit(main() or 0)
    except KeyboardInterrupt:
        pass
